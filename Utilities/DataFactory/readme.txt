Introduction
============
genDataFactory is a tool to manage data factory data.

It builds an internal database for data factory, and allows to save this database to Json or binary file or directly to board's flash.
Internal database may be populated by the following manner
	Reading an existing Json file
	Reading an existing binary file 
	Reading directly from a board's flash
	Command line option to set database elements one by one.
If several above manner are used, each new manner overrides the elements already present in the database. If Element1 is present in a Json file, and, also in a binary file, then, the database will store the value for Element1 of the binary file if you are reading the Json file, and also reading the binary file.
Command line options are in any case overriding any previously stored values.

Json file may come from any text editor or from output of this tool.
Binary file may come directly from STM32CubeProgrammer, reading data factories information from board's flash, or may come from output of this tool.

While building the database, you may also remove elements if you need to clean the data factory.

Once build, it is possible to save the database. You have 3 possibilities for saving it, all three may be used at the same time :
	Save to Json file
	Save to Binary file
	Save to board's flash
But one you may flash data factory to board only if you previously save a binary file, as it is the binary file that will be flashed to the board.

In addition to this main function, this tool also allows you to flash in the board a M0 and M4 firmware image. MO and M4 firmware flashing (in this order) are the very first actions done.

Parameters
==========
3 types of parameters :
	1. Add/modify from files or board flash
	2. Remove parameters
	3. Output to file or board flash
	4. Other parameters
	5. Examples

	1. Add/modify
	Inputs may come from any of
		a) Files :
			§ Json file with option -jsonIn or -ji
			Example for json file :
				{
				    "VENDOR_ID": "1",
				    "PRODUCT_ID": "43707"
				}
			§ Binary file with correct TLV format. May be a file generated by the tool. With option -binaryInput or -bi
			§ Flash of a connected board by specifying a start address using option -flashIn or -fi to specify the address in flash from which to read. 2048 bytes will be read from this address.  See also options -programmerPath and -externalLoader
		You may specify none or all these three options (Json input, binary input, flash input). If more than one are specify, the read order will be 
			i. Read Json file
			ii. Read Binary file
			iii. Read Flash
		Each file read will override data read from previous files
		b) Command line option
			Each possible data to set has its own parameter to be set (see help) :
			
			  -certificationdeclaration CERTIFICATIONDECLARATION, -cd CERTIFICATIONDECLARATION
				set path for certification declaration pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -firmwareinformation FIRMWAREINFORMATION, -fw FIRMWAREINFORMATION
				set path for certification declaration pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -deviceattestationcertificate DEVICEATTESTATIONCERTIFICATE, -dc DEVICEATTESTATIONCERTIFICATE
				set path for device attestation certificate pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -paiCertificate PAICERTIFICATE, -pc PAICERTIFICATE
				set path for PAI certification pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -deviceattestationprivkey DEVICEATTESTATIONPRIVKEY, -dr DEVICEATTESTATIONPRIVKEY
				set path for device attestation private key pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -deviceattestationpubkey DEVICEATTESTATIONPUBKEY, -dp DEVICEATTESTATIONPUBKEY
				set path for device attestation public key pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -hardwareVersion HARDWAREVERSION, -hv HARDWAREVERSION
				set value for hardware version. Override value read from Json or binary file, or read from board's flash.
			  -hardwareVersionString HARDWAREVERSIONSTRING, -hs HARDWAREVERSIONSTRING
				set value for hardware version string. Override value read from Json or binary file, or read from board's flash.       
			  -productName PRODUCTNAME, -pd PRODUCTNAME
				set value for product name. Override value read from Json or binary file, or read from board's flash.
			  -productID PRODUCTID, -pi PRODUCTID
				set value for product ID. Override value read from Json or binary file, or read from board's flash.
			  -setupDiscriminator SETUPDISCRIMINATOR, -sd SETUPDISCRIMINATOR
				set value for setup discriminator. Override value read from Json or binary file, or read from board's flash.
			  -spake2IterationCount SPAKE2ITERATIONCOUNT, -si SPAKE2ITERATIONCOUNT
				set value for spake2 iteration count. Override value read from Json or binary file, or read from board's flash.        
			  -spake2salt SPAKE2SALT, -ss SPAKE2SALT
				set path for spake2 salt pem or der file. Override value read from Json or binary file, or read from board's flash.    
			  -spake2verifier SPAKE2VERIFIER, -sv SPAKE2VERIFIER
				set path for spake2 verifier pem or der file. Override value read from Json or binary file, or read from board's flash.
			  -spake2SetupPasscode SPAKE2SETUPPASSCODE, -sp SPAKE2SETUPPASSCODE
				set value for spake2 setup passcode. Override value read from Json or binary file, or read from board's flash.
			  -vendorName VENDORNAME, -vn VENDORNAME
				set value for vendor name. Override value read from Json or binary file, or read from board's flash.
			  -vendorId VENDORID, -vi VENDORID
				set value for vendor ID. Override value read from Json or binary file, or read from board's flash.
			  -serialNumber SERIALNUMBER, -sn SERIALNUMBER
				set value for serial number. Override value read from Json or binary file, or read from board's flash.
			
			When a parameter is set through a command line parameter, it overrides any value read in a file or in flash
			
	2. Remove parameters
		The only way to remove a parameter is through command line, using the -remove option.
		-remove option followed by one of (not case sensitive)
		
			§ Certificationdeclaration
			§ Firmwareinformation
			§ Deviceattestationcertificate
			§ paiCertificate
			§ Deviceattestationprivkey
			§ Deviceattestationpubkey
			§ hardwareVersion
			§ hardwareVersionString
			§ productName
			§ productID
			§ setupDiscriminator
			§ spake2IterationCount
			§ Spake2salt
			§ Spake2verifier
			§ spake2SetupPasscode
			§ vendorName
			§ vendorId
			§ serialNumber
		
		will remove the corresponding parameter.
		You can add as many -remove option as needed. All the corresponding parameters will be removed.
		
		Remove parameters are taken into account at the last after previous steps, that is after reading files, reading board's flash, setting parameters.
		
	3. Output to file or board flash
		As input options, we have 3 corresponding options :
		Save to Json file using -jsonOut or -jo option
		Save to binary file using -binaryOut or -bo option
		Save to board's using -flashAddr or -fa option
		All three options can be used at the same time, but save to board's flash need to have the option to save to binary file setted. See also options -programmerPath and -externalLoader.
		
	4. Other parameters
		-programmerPath, -pp
			Path to STM32CubeProgrammer. If not set, c:\Program Files\STMicroelectronics\STM32Cube\STM32CubeProgrammer\bin will be used. Used if option flashAddr is set.
		-externalLoader, -el
			External loader file to use. If not set, S25FL128S_STM32WB5MM-DK will be used. External loader is in this folder : c:\Program Files\STMicroelectronics\STM32Cube\STM32CubeProgrammer\bin\ExternalLoader. Used if option flashAddr is set.
			
		  -flashM4 FLASHM4, -m4 FLASHM4
			Path to the M4 firmware to be flashed in the board at address 0x08000000. Flashing the M4nfirmware is the very first action done or just after M0 flashing.
		  -M4Addr M4ADDR, -4a M4ADDR
			Address wher the M4 firmware is flashed. if not set, 0x08000000 will be used
		  -flashM0 FLASHM0, -m0 FLASHM0
			Path to the M0 firmware to be flashed in the board at address defined by -M0Addr option. Flashing the M0 firmware is the very first action done.
		  -M0Addr M0ADDR, -0a M0ADDR
			Address wher the M4 firmware is flashed. No default value. Mansatory if -flashM0 option is used.
			
		-showHelp", "-sh"
			Show help message and exit
		
	5. Examples
		py -3 .\genFactoryData.py -ji .\data.json -bi data.bin -fi 0x901C0000 -remove vendorID  -jo dataOUT.json -bo dataOUT.bin -vi 0x0001 -fa 0x901C0000 -pi 0xaabb
		
			i. Read data.json file, then read data.bin file (eventually overriding json data), then read data from board's flash at address 0x901C0000.
			ii. Set vendirID- to value 0x0001 and productID to 0xaabb
			iii. Remove the parameter vendorID
			iv. Save to Json file, binary file and board's flash
		
		py -3 .\genFactoryData.py -ji .\data.json -bi data.bin -fi 0x901C0000 -dp connectedhomeip\credentials\development\attestation\Chip-Development-PAA-Cert.der -pi 0xaabb -jo dataChangePAI.json
